// =====================================================================
// ‚úÖ VERIFICACI√ìN DE AUTENTICACI√ìN MTZ
// Archivo: auth/verify-auth.js
// Prop√≥sito: Verificar que la autenticaci√≥n funciona correctamente
// Dependencias: supabase client
// =====================================================================

import { supabase } from '../src/lib/supabase.js'

/**
 * Verificar estado de autenticaci√≥n del sistema
 */
async function verifyAuthentication() {
  console.log('üîç Verificando sistema de autenticaci√≥n MTZ...')
  
  const testUsers = [
    { email: 'mtzcontabilidad@gmail.com', password: 'Alohomora33.', type: 'Producci√≥n' },
    { email: 'admin@mtz.cl', password: 'admin123', type: 'Demo Admin' },
    { email: 'colaborador@mtz.cl', password: 'colaborador123', type: 'Demo Colaborador' }
  ]

  let successCount = 0
  let totalTests = testUsers.length

  try {
    for (const testUser of testUsers) {
      console.log(`\nüß™ Probando usuario ${testUser.type}: ${testUser.email}`)
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email: testUser.email,
        password: testUser.password
      })
      
      if (error) {
        console.error(`‚ùå Error en ${testUser.type}:`, error.message)
        
        // Intentar diagnosticar el error
        if (error.message.includes('Invalid login credentials')) {
          console.log(`   üí° Posible causa: Credenciales incorrectas o email no confirmado`)
        } else if (error.message.includes('Email not confirmed')) {
          console.log(`   üí° Causa: Email no confirmado. Usuario existe pero necesita confirmaci√≥n`)
        }
      } else {
        console.log(`‚úÖ ${testUser.type} autenticado exitosamente`)
        console.log(`   üìß Email: ${data.user.email}`)
        console.log(`   üÜî ID: ${data.user.id}`)
        console.log(`   ‚úâÔ∏è Email confirmado: ${data.user.email_confirmed_at ? 'S√≠' : 'No'}`)
        console.log(`   üìÖ Creado: ${new Date(data.user.created_at).toLocaleString()}`)
        successCount++
        
        // Cerrar sesi√≥n para siguiente prueba
        await supabase.auth.signOut()
      }
    }

    // Verificar configuraci√≥n de Supabase
    console.log('\nüîß Verificando configuraci√≥n de Supabase...')
    
    // Obtener usuario actual (deber√≠a ser null)
    const { data: currentUser } = await supabase.auth.getUser()
    console.log(`üë§ Usuario actual: ${currentUser.user ? currentUser.user.email : 'Ninguno (correcto)'}`)
    
    // Verificar conexi√≥n con base de datos
    const { data: testQuery, error: dbError } = await supabase
      .from('roles')
      .select('nombre')
      .limit(1)
    
    if (dbError) {
      console.error('‚ùå Error conectando con base de datos:', dbError.message)
    } else {
      console.log('‚úÖ Conexi√≥n con base de datos funcionando')
      console.log(`üìã Roles disponibles: ${testQuery?.length || 0}`)
    }

  } catch (error) {
    console.error('‚ùå Error general en verificaci√≥n:', error)
  }
  
  // Resumen final
  console.log('\nüìä RESUMEN DE VERIFICACI√ìN:')
  console.log(`‚úÖ Usuarios funcionando: ${successCount}/${totalTests}`)
  console.log(`‚ùå Usuarios con problemas: ${totalTests - successCount}/${totalTests}`)
  
  if (successCount === totalTests) {
    console.log('üéâ AUTENTICACI√ìN COMPLETAMENTE FUNCIONAL')
  } else if (successCount > 0) {
    console.log('‚ö†Ô∏è AUTENTICACI√ìN PARCIALMENTE FUNCIONAL')
  } else {
    console.log('‚ùå AUTENTICACI√ìN NO FUNCIONAL')
  }
  
  return successCount === totalTests
}

/**
 * Verificar usuario espec√≠fico
 */
async function verifySpecificUser(email, password) {
  console.log(`üîç Verificando usuario espec√≠fico: ${email}`)
  
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    })
    
    if (error) {
      console.error('‚ùå Error:', error.message)
      return false
    }
    
    console.log('‚úÖ Usuario verificado exitosamente')
    console.log('üìß Email:', data.user.email)
    console.log('üÜî ID:', data.user.id)
    
    await supabase.auth.signOut()
    return true
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error)
    return false
  }
}

// Ejecutar verificaci√≥n si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  verifyAuthentication()
}

export { verifyAuthentication, verifySpecificUser }

// ‚úÖ VERIFICACI√ìN DE AUTENTICACI√ìN LISTA
