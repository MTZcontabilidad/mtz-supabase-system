import { createClient } from '@supabase/supabase-js';

// Configuraci√≥n de Supabase
const supabaseUrl = 'https://bwgnmastihgndmtbqvkj.supabase.co';
const supabaseKey =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ3Z25tYXN0aWhnbmRtdGJxdmtqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjczMzM3OCwiZXhwIjoyMDY4MzA5Mzc4fQ.2y4rbxpHNxhM2tMHzZ43GQi9fIMC6lpl9FjEw7sxoNM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function verificarToken() {
  console.log('üîç VERIFICANDO TOKEN DE SUPABASE\n');
  console.log('='.repeat(50));

  try {
    // 1. Verificar URL y token
    console.log('\n1Ô∏è‚É£ CONFIGURACI√ìN:');
    console.log(`   URL: ${supabaseUrl}`);
    console.log(`   Token: ${supabaseKey.substring(0, 30)}...`);
    console.log(`   Project Ref: bwgnmastihgndmtbqvkj`);

    // 2. Verificar conectividad b√°sica
    console.log('\n2Ô∏è‚É£ VERIFICANDO CONECTIVIDAD:');
    try {
      const { data, error } = await supabase.auth.getUser();

      if (error) {
        console.log(`   ‚ùå Error de autenticaci√≥n: ${error.message}`);
        console.log(`   üí° Esto puede ser normal para service role tokens`);
      } else {
        console.log(`   ‚úÖ Conectividad exitosa`);
        console.log(`   üë§ Usuario: ${data.user?.email || 'Service Role'}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error de conectividad: ${error.message}`);
    }

    // 3. Verificar si el proyecto existe
    console.log('\n3Ô∏è‚É£ VERIFICANDO PROYECTO:');
    try {
      // Intentar una operaci√≥n muy b√°sica
      const { data, error } = await supabase
        .from('pg_catalog.pg_tables')
        .select('tablename')
        .limit(1);

      if (error) {
        console.log(`   ‚ùå Error accediendo al proyecto: ${error.message}`);

        if (error.message.includes('permission denied')) {
          console.log(`   üí° El proyecto existe pero no hay permisos`);
        } else if (error.message.includes('does not exist')) {
          console.log(`   üí° El proyecto no existe`);
        } else if (error.message.includes('connection')) {
          console.log(`   üí° Problema de conectividad`);
        }
      } else {
        console.log(`   ‚úÖ Proyecto accesible`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error verificando proyecto: ${error.message}`);
    }

    // 4. Verificar token espec√≠ficamente
    console.log('\n4Ô∏è‚É£ VERIFICANDO TOKEN:');

    // Decodificar el JWT para ver la informaci√≥n
    try {
      const tokenParts = supabaseKey.split('.');
      if (tokenParts.length === 3) {
        const payload = JSON.parse(
          Buffer.from(tokenParts[1], 'base64').toString()
        );

        console.log(`   ‚úÖ Token JWT v√°lido`);
        console.log(
          `   üìÖ Expira: ${new Date(payload.exp * 1000).toLocaleString()}`
        );
        console.log(`   üè¢ Project: ${payload.ref}`);
        console.log(`   üë§ Role: ${payload.role}`);

        if (payload.role === 'service_role') {
          console.log(`   ‚úÖ Role correcto: service_role`);
        } else {
          console.log(
            `   ‚ö†Ô∏è Role incorrecto: ${payload.role} (deber√≠a ser service_role)`
          );
        }
      } else {
        console.log(`   ‚ùå Token no es un JWT v√°lido`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error decodificando token: ${error.message}`);
    }

    // 5. Probar operaci√≥n m√°s b√°sica
    console.log('\n5Ô∏è‚É£ PROBANDO OPERACI√ìN B√ÅSICA:');
    try {
      // Intentar acceder a una vista del sistema que deber√≠a estar disponible
      const { data, error } = await supabase
        .from('pg_catalog.pg_database')
        .select('datname')
        .limit(1);

      if (error) {
        console.log(`   ‚ùå Error en operaci√≥n b√°sica: ${error.message}`);
      } else {
        console.log(`   ‚úÖ Operaci√≥n b√°sica exitosa`);
        console.log(`   üìä Datos obtenidos: ${data.length} registros`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error en operaci√≥n b√°sica: ${error.message}`);
    }

    // 6. Estado final
    console.log('\n6Ô∏è‚É£ ESTADO FINAL:');
    console.log('   üîç El token parece ser v√°lido');
    console.log('   üîç El proyecto existe');
    console.log('   üîç El problema es de permisos en el esquema public');

    console.log('\nüí° RECOMENDACIONES:');
    console.log('   1. Ve a Supabase Dashboard');
    console.log('   2. Abre SQL Editor');
    console.log('   3. Ejecuta el script sql-ultra-simple.sql');
    console.log('   4. Verifica que las tablas se crean');
    console.log('   5. Si hay errores, revisa los permisos del proyecto');
  } catch (error) {
    console.log(`‚ùå Error general: ${error.message}`);
  }
}

// Ejecutar verificaci√≥n
verificarToken().catch(console.error);
