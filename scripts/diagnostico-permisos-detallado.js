import { createClient } from '@supabase/supabase-js';

// Configuraci√≥n de Supabase
const supabaseUrl = 'https://bwgnmastihgndmtbqvkj.supabase.co';
const supabaseKey =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ3Z25tYXN0aWhnbmRtdGJxdmtqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjczMzM3OCwiZXhwIjoyMDY4MzA5Mzc4fQ.2y4rbxpHNxhM2tMHzZ43GQi9fIMC6lpl9FjEw7sxoNM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnosticoPermisos() {
  console.log('üîç DIAGN√ìSTICO DETALLADO DE PERMISOS\n');
  console.log('='.repeat(50));

  try {
    // 1. Verificar autenticaci√≥n b√°sica
    console.log('\n1Ô∏è‚É£ VERIFICANDO AUTENTICACI√ìN:');
    const { data: authData, error: authError } = await supabase.auth.getUser();

    if (authError) {
      console.log(`   ‚ùå Error de autenticaci√≥n: ${authError.message}`);
    } else {
      console.log('   ‚úÖ Autenticaci√≥n exitosa');
      console.log(`   üë§ Usuario: ${authData.user?.email || 'Service Role'}`);
    }

    // 2. Verificar acceso a informaci√≥n del sistema
    console.log('\n2Ô∏è‚É£ VERIFICANDO ACCESO A SISTEMA:');

    // Intentar acceder a pg_tables directamente
    const { data: pgTables, error: pgError } = await supabase
      .from('pg_tables')
      .select('tablename, schemaname')
      .eq('schemaname', 'public')
      .limit(3);

    if (pgError) {
      console.log(`   ‚ùå Error pg_tables: ${pgError.message}`);
    } else {
      console.log(`   ‚úÖ Acceso a pg_tables: ${pgTables.length} tablas`);
      pgTables.forEach(table => {
        console.log(`      üìã ${table.tablename}`);
      });
    }

    // 3. Verificar acceso a information_schema
    console.log('\n3Ô∏è‚É£ VERIFICANDO INFORMATION_SCHEMA:');

    const { data: infoSchema, error: infoError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .limit(3);

    if (infoError) {
      console.log(`   ‚ùå Error information_schema: ${infoError.message}`);
    } else {
      console.log(
        `   ‚úÖ Acceso a information_schema: ${infoSchema.length} tablas`
      );
      infoSchema.forEach(table => {
        console.log(`      üìã ${table.table_name}`);
      });
    }

    // 4. Intentar acceder directamente a las tablas de prueba
    console.log('\n4Ô∏è‚É£ VERIFICANDO TABLAS DE PRUEBA:');

    // Probar test_mcp_simple
    const { data: simpleData, error: simpleError } = await supabase
      .from('test_mcp_simple')
      .select('*')
      .limit(1);

    if (simpleError) {
      console.log(`   ‚ùå Error test_mcp_simple: ${simpleError.message}`);
    } else {
      console.log(
        `   ‚úÖ test_mcp_simple accesible: ${simpleData.length} registros`
      );
    }

    // Probar test_mcp
    const { data: mcpData, error: mcpError } = await supabase
      .from('test_mcp')
      .select('*')
      .limit(1);

    if (mcpError) {
      console.log(`   ‚ùå Error test_mcp: ${mcpError.message}`);
    } else {
      console.log(`   ‚úÖ test_mcp accesible: ${mcpData.length} registros`);
    }

    // 5. Verificar configuraci√≥n del MCP
    console.log('\n5Ô∏è‚É£ CONFIGURACI√ìN DEL MCP:');
    console.log('   üìÅ Archivo: .cursor/mcp.json');
    console.log('   üîë Project Ref: bwgnmastihgndmtbqvkj');
    console.log('   üîê Token configurado: ‚úÖ');
    console.log('   üìñ Modo: --read-only');

    // 6. Probar operaciones b√°sicas
    console.log('\n6Ô∏è‚É£ PROBANDO OPERACIONES B√ÅSICAS:');

    // Probar SELECT simple
    try {
      const { data: selectData, error: selectError } = await supabase
        .from('test_mcp_simple')
        .select('id, nombre')
        .limit(1);

      if (selectError) {
        console.log(`   ‚ùå SELECT fall√≥: ${selectError.message}`);
      } else {
        console.log(`   ‚úÖ SELECT exitoso: ${selectData.length} registros`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error en SELECT: ${error.message}`);
    }

    // 7. Estado final
    console.log('\n7Ô∏è‚É£ ESTADO FINAL:');

    if (pgError && infoError && simpleError && mcpError) {
      console.log('   üî¥ PROBLEMA CR√çTICO: No hay acceso a la base de datos');
      console.log('   üí° Posibles causas:');
      console.log('      - El SQL no se ejecut√≥ correctamente');
      console.log('      - El token no tiene permisos suficientes');
      console.log('      - La base de datos est√° en modo mantenimiento');
      console.log('      - El proyecto no existe o est√° suspendido');
    } else if (pgError || infoError) {
      console.log('   üü° PROBLEMA PARCIAL: Acceso limitado');
      console.log('   üí° Algunas operaciones funcionan, otras no');
    } else {
      console.log('   üü¢ TODO FUNCIONA: El MCP deber√≠a estar operativo');
    }

    console.log('\nüìã RECOMENDACIONES:');
    console.log('   1. Verifica que ejecutaste el SQL en Supabase Dashboard');
    console.log('   2. Verifica que el proyecto est√° activo');
    console.log('   3. Verifica que el token tiene permisos de service role');
    console.log('   4. Reinicia Cursor despu√©s de ejecutar el SQL');
  } catch (error) {
    console.log(`‚ùå Error general: ${error.message}`);
  }
}

// Ejecutar diagn√≥stico
diagnosticoPermisos().catch(console.error);
