import { createClient } from '@supabase/supabase-js';

// Configuraci√≥n de Supabase
const supabaseUrl = 'https://bwgnmastihgndmtbqvkj.supabase.co';
const supabaseKey =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ3Z25tYXN0aWhnbmRtdGJxdmtqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjczMzM3OCwiZXhwIjoyMDY4MzA5Mzc4fQ.2y4rbxpHNxhM2tMHzZ43GQi9fIMC6lpl9FjEw7sxoNM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnosticoDetallado() {
  console.log('üîç DIAGN√ìSTICO DETALLADO DEL MCP DE SUPABASE\n');
  console.log('='.repeat(50));

  // 1. Verificar configuraci√≥n b√°sica
  console.log('\n1Ô∏è‚É£ CONFIGURACI√ìN B√ÅSICA:');
  console.log(`   URL: ${supabaseUrl}`);
  console.log(`   Token: ${supabaseKey.substring(0, 20)}...`);
  console.log('   ‚úÖ Configuraci√≥n b√°sica correcta');

  // 2. Verificar conectividad
  console.log('\n2Ô∏è‚É£ VERIFICANDO CONECTIVIDAD:');
  try {
    const { data, error } = await supabase.auth.getUser();

    if (error) {
      console.log(`   ‚ùå Error de autenticaci√≥n: ${error.message}`);
    } else {
      console.log('   ‚úÖ Conectividad exitosa');
      console.log(
        `   üë§ Usuario autenticado: ${data.user?.email || 'Service Role'}`
      );
    }
  } catch (error) {
    console.log(`   ‚ùå Error de conectividad: ${error.message}`);
  }

  // 3. Verificar permisos del service role
  console.log('\n3Ô∏è‚É£ VERIFICANDO PERMISOS DEL SERVICE ROLE:');
  try {
    // Intentar acceder a informaci√≥n del sistema
    const { data: pgTables, error: pgError } = await supabase
      .from('pg_tables')
      .select('tablename, schemaname')
      .eq('schemaname', 'public')
      .limit(5);

    if (pgError) {
      console.log(`   ‚ùå Error al acceder a pg_tables: ${pgError.message}`);
    } else {
      console.log('   ‚úÖ Acceso a pg_tables exitoso');
      console.log(`   üìã Tablas encontradas: ${pgTables.length}`);
    }
  } catch (error) {
    console.log(`   ‚ùå Error general: ${error.message}`);
  }

  // 4. Verificar informaci√≥n del esquema
  console.log('\n4Ô∏è‚É£ VERIFICANDO ESQUEMA PUBLIC:');
  try {
    const { data: schemaInfo, error: schemaError } =
      await supabase.rpc('get_schema_info');

    if (schemaError) {
      console.log(
        `   ‚ùå Error al obtener info del esquema: ${schemaError.message}`
      );
      console.log('   üí° Intentando m√©todo alternativo...');

      // M√©todo alternativo
      const { data: altInfo, error: altError } = await supabase
        .from('information_schema.schemata')
        .select('schema_name')
        .eq('schema_name', 'public');

      if (altError) {
        console.log(`   ‚ùå M√©todo alternativo fall√≥: ${altError.message}`);
      } else {
        console.log('   ‚úÖ Esquema public accesible');
      }
    } else {
      console.log('   ‚úÖ Informaci√≥n del esquema obtenida');
    }
  } catch (error) {
    console.log(`   ‚ùå Error: ${error.message}`);
  }

  // 5. Verificar configuraci√≥n del MCP
  console.log('\n5Ô∏è‚É£ CONFIGURACI√ìN DEL MCP:');
  console.log('   üìÅ Archivo: .cursor/mcp.json');
  console.log('   üîë Project Ref: bwgnmastihgndmtbqvkj');
  console.log('   üîê Token configurado: ‚úÖ');
  console.log('   üìñ Modo: --read-only');
  console.log('   ‚ö†Ô∏è  Modo read-only puede limitar algunas operaciones');

  // 6. Recomendaciones
  console.log('\n6Ô∏è‚É£ RECOMENDACIONES:');
  console.log('   üí° Para probar el MCP completamente:');
  console.log('      1. Crear algunas tablas de prueba en Supabase Dashboard');
  console.log('      2. Configurar RLS policies b√°sicas');
  console.log('      3. Insertar datos de prueba');
  console.log('      4. Reiniciar Cursor para cargar el MCP');
  console.log('      5. Probar las herramientas del MCP');

  // 7. Estado final
  console.log('\n7Ô∏è‚É£ ESTADO FINAL:');
  console.log('   üü° MCP configurado pero necesita datos para probar');
  console.log('   üìã Pr√≥ximos pasos:');
  console.log('      - Crear tablas de prueba en Supabase Dashboard');
  console.log('      - Reiniciar Cursor');
  console.log('      - Probar herramientas del MCP');

  console.log('\n' + '='.repeat(50));
}

// Funci√≥n para crear datos de prueba m√≠nimos
async function crearDatosPrueba() {
  console.log('\nüîß CREANDO DATOS DE PRUEBA M√çNIMOS...');

  try {
    // Intentar crear una tabla simple
    const { error } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS test_mcp_simple (
          id SERIAL PRIMARY KEY,
          nombre TEXT,
          created_at TIMESTAMP DEFAULT NOW()
        );
      `,
    });

    if (error) {
      console.log(`   ‚ùå No se pudo crear tabla: ${error.message}`);
      console.log('   üí° Esto es normal en modo --read-only');
      return false;
    }

    console.log('   ‚úÖ Tabla de prueba creada');
    return true;
  } catch (error) {
    console.log(`   ‚ùå Error: ${error.message}`);
    return false;
  }
}

// Ejecutar diagn√≥stico
async function main() {
  await diagnosticoDetallado();

  console.log('\nüéØ RESUMEN:');
  console.log('   - El MCP est√° configurado correctamente');
  console.log('   - La conectividad funciona');
  console.log('   - El modo --read-only est√° activo');
  console.log(
    '   - Se necesitan datos de prueba para verificar funcionalidad completa'
  );

  console.log('\nüöÄ Para activar el MCP completamente:');
  console.log('   1. Ve a Supabase Dashboard');
  console.log(
    '   2. Ejecuta el SQL de prueba en scripts/sql-minimo-pruebas.sql'
  );
  console.log('   3. Reinicia Cursor');
  console.log('   4. Prueba las herramientas del MCP');
}

main().catch(console.error);
