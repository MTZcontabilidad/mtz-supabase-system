import { createClient } from '@supabase/supabase-js';

// Configuraci√≥n de Supabase con token an√≥nimo
const supabaseUrl = 'https://bwgnmastihgndmtbqvkj.supabase.co';
const supabaseAnonKey =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ3Z25tYXN0aWhnbmRtdGJxdmtqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3MzMzNzgsImV4cCI6MjA2ODMwOTM3OH0.ZTOHO8HXeDrsmBomYXX516Leq9WdRuM7lunqNI2uC8I';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function verificarMCPActualizado() {
  console.log('üîç VERIFICANDO MCP DESPU√âS DE ACTUALIZACI√ìN\n');
  console.log('='.repeat(60));

  try {
    // 1. Verificar conexi√≥n b√°sica
    console.log('\n1Ô∏è‚É£ VERIFICANDO CONEXI√ìN B√ÅSICA:');

    const { data: testData, error: testError } = await supabase
      .from('test_mcp_simple')
      .select('*')
      .limit(1);

    if (testError) {
      console.log(`   ‚ùå Error de conexi√≥n: ${testError.message}`);
      return;
    } else {
      console.log('   ‚úÖ Conexi√≥n exitosa');
    }

    // 2. Verificar todas las tablas de prueba
    console.log('\n2Ô∏è‚É£ VERIFICANDO TABLAS DE PRUEBA:');

    const tables = ['test_basic', 'test_mcp', 'test_mcp_simple'];

    for (const tableName of tables) {
      const { data, error } = await supabase
        .from(tableName)
        .select('count')
        .limit(1);

      if (error) {
        console.log(`   ‚ùå ${tableName}: ${error.message}`);
      } else {
        console.log(`   ‚úÖ ${tableName}: Accesible`);
      }
    }

    // 3. Probar operaciones CRUD
    console.log('\n3Ô∏è‚É£ PROBANDO OPERACIONES CRUD:');

    // INSERT
    const { data: newRecord, error: insertError } = await supabase
      .from('test_mcp_simple')
      .insert({
        nombre: 'MCP Actualizado',
        descripcion: 'Prueba despu√©s de actualizaci√≥n',
      })
      .select()
      .single();

    if (insertError) {
      console.log(`   ‚ùå Error al insertar: ${insertError.message}`);
    } else {
      console.log(`   ‚úÖ INSERT: ${newRecord.nombre} (ID: ${newRecord.id})`);

      // UPDATE
      const { data: updatedRecord, error: updateError } = await supabase
        .from('test_mcp_simple')
        .update({ descripcion: 'Actualizado despu√©s de configuraci√≥n MCP' })
        .eq('id', newRecord.id)
        .select()
        .single();

      if (updateError) {
        console.log(`   ‚ùå Error al actualizar: ${updateError.message}`);
      } else {
        console.log(`   ‚úÖ UPDATE: ${updatedRecord.descripcion}`);
      }

      // DELETE
      const { error: deleteError } = await supabase
        .from('test_mcp_simple')
        .delete()
        .eq('id', newRecord.id);

      if (deleteError) {
        console.log(`   ‚ùå Error al eliminar: ${deleteError.message}`);
      } else {
        console.log(`   ‚úÖ DELETE: Registro ID ${newRecord.id} eliminado`);
      }
    }

    // 4. Estado del MCP
    console.log('\n4Ô∏è‚É£ ESTADO DEL MCP:');
    console.log('   üü¢ Base de datos: Funcionando');
    console.log('   üü¢ Operaciones CRUD: Funcionando');
    console.log('   üü¢ Token an√≥nimo: V√°lido');
    console.log('   üìã Configuraci√≥n MCP actualizada');
    console.log('   üí° Pr√≥ximo paso: Reiniciar Cursor para activar MCP');

    // 5. Informaci√≥n de configuraci√≥n
    console.log('\n5Ô∏è‚É£ CONFIGURACI√ìN ACTUAL:');
    console.log('   üìÅ Archivo: .cursor/mcp.json');
    console.log('   üîß Comando: node');
    console.log('   üì¶ Paquete: @supabase/mcp-server-supabase (local)');
    console.log('   üîë Token: Configurado');
    console.log('   üéØ Proyecto: bwgnmastihgndmtbqvkj');
  } catch (error) {
    console.log(`‚ùå Error general: ${error.message}`);
  }
}

// Ejecutar verificaci√≥n
verificarMCPActualizado().catch(console.error);
